CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)

FIND_PACKAGE(Qt4 REQUIRED)
FIND_PACKAGE(Boost COMPONENTS serialization)

IF (NOT Boost_FOUND)
	MESSAGE(FATAL_ERROR "Boost serialization library is not installed")
ENDIF (NOT Boost_FOUND)

SET(QT_USE_QTNETWORK 1)
SET(QT_USE_QTXML 1)
SET(QT_USE_QTSQL 1)

INCLUDE(${QT_USE_FILE})
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})

# Include our custom cmake modules
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMake)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")

IF(${CMAKE_BUILD_TYPE} MATCHES "Release")
	ADD_DEFINITIONS(-DNDEBUG)
	ADD_DEFINITIONS(-DQT_NO_DEBUG_OUTPUT)
ENDIF(${CMAKE_BUILD_TYPE} MATCHES "Release")


SET(TITLE "O sRSSly")
SET(BINARY_NAME "osrssly")
SET(REVISION "Unknown")

FIND_PROGRAM(
	SVN_BINARY
	svn)

IF(SVN_BINARY)
	EXECUTE_PROCESS(
		COMMAND ${SVN_BINARY} info ${CMAKE_SOURCE_DIR}
		COMMAND grep Revision
		COMMAND cut -f 2 -d " "
		COMMAND tr -d "\n"
		RESULT_VARIABLE REVISION_FOUND
		OUTPUT_VARIABLE REVISION
	)
ENDIF(SVN_BINARY)

CONFIGURE_FILE(config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)

IF(${CMAKE_SYSTEM} MATCHES "Darwin")
	FIND_LIBRARY(SECURITY Security)
	IF(${CMAKE_BUILD_TYPE} MATCHES "Release")
		# Enable universal binaries for release builds
		SET(CMAKE_OSX_ARCHITECTURES "ppc;i386")
	ENDIF(${CMAKE_BUILD_TYPE} MATCHES "Release")
ELSEIF(${CMAKE_SYSTEM} MATCHES "Linux")
	FIND_PACKAGE(PkgConfig REQUIRED)
	pkg_check_modules(GNOME_KEYRING gnome-keyring-1>=0.8)
	IF(NOT ${GNOME_KEYRING_FOUND})
		MESSAGE("Gnome Keyring not found")
		ADD_DEFINITIONS(-DNO_KEYRING)
	ENDIF(NOT ${GNOME_KEYRING_FOUND})
ELSE(${CMAKE_SYSTEM} MATCHES "Darwin")
	ADD_DEFINITIONS(-DNO_KEYRING)
ENDIF(${CMAKE_SYSTEM} MATCHES "Darwin")

FILE(GLOB RESOURCE_FILES RELATIVE ${CMAKE_SOURCE_DIR} data/[^.]*)
FOREACH(RESOURCE ${RESOURCE_FILES})
	IF(${RESOURCE} MATCHES "\\.html$")
		CONFIGURE_FILE(${RESOURCE} ${CMAKE_CURRENT_BINARY_DIR}/${RESOURCE})
	ELSE(${RESOURCE} MATCHES "\\.html$")
		CONFIGURE_FILE(${RESOURCE} ${CMAKE_CURRENT_BINARY_DIR}/${RESOURCE} COPYONLY)
	ENDIF(${RESOURCE} MATCHES "\\.html$")
ENDFOREACH(RESOURCE ${RESOURCE_FILES})


# Subdirectories
ADD_SUBDIRECTORY(protobuf)
ADD_SUBDIRECTORY(messages)
ADD_SUBDIRECTORY(spawn)
ADD_SUBDIRECTORY(src)

# Uninstall support
CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
  IMMEDIATE @ONLY)

ADD_CUSTOM_TARGET(uninstall
  "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
