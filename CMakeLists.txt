CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)
PROJECT("O sRSSly")

FIND_PACKAGE(Qt4 REQUIRED)
#FIND_PACKAGE(Boost COMPONENTS serialization)
FIND_PACKAGE(Boost REQUIRED)

IF (NOT Boost_FOUND)
	MESSAGE(FATAL_ERROR "Boost serialization library is not installed")
ENDIF (NOT Boost_FOUND)

SET(QT_USE_QTNETWORK 1)
SET(QT_USE_QTXML 1)
SET(QT_USE_QTSQL 1)

INCLUDE(${QT_USE_FILE})
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})

# Include our custom cmake modules
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMake)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")

IF(${CMAKE_BUILD_TYPE} MATCHES "Release")
	ADD_DEFINITIONS(-DNDEBUG)
	ADD_DEFINITIONS(-DQT_NO_DEBUG_OUTPUT)
ENDIF(${CMAKE_BUILD_TYPE} MATCHES "Release")


SET(TITLE "O sRSSly")
SET(BINARY_NAME "osrssly")
SET(REVISION "Unknown")

OPTION(USE_SPAWN "Use separate process each webpage" OFF)

FIND_PROGRAM(
	SVN_BINARY
	svn)

IF(SVN_BINARY)
	EXECUTE_PROCESS(
		COMMAND ${SVN_BINARY} info ${CMAKE_SOURCE_DIR}
		COMMAND grep Revision
		COMMAND cut -f 2 -d " "
		COMMAND tr -d "\n"
		RESULT_VARIABLE REVISION_FOUND
		OUTPUT_VARIABLE REVISION
	)
ENDIF(SVN_BINARY)

CONFIGURE_FILE(config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
CONFIGURE_FILE(mkbundle.sh ${CMAKE_CURRENT_BINARY_DIR}/mkbundle.sh @ONLY)
CONFIGURE_FILE(Info.plist ${CMAKE_CURRENT_BINARY_DIR}/Info.plist)
CONFIGURE_FILE(qt.conf ${CMAKE_CURRENT_BINARY_DIR}/qt.conf.BUNDLEME COPYONLY)
CONFIGURE_FILE(data/Feeder.icns ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME}.icns COPYONLY)

IF(APPLE)
	IF(${CMAKE_BUILD_TYPE} MATCHES "Release")
		# Enable universal binaries for release builds
		SET(CMAKE_OSX_ARCHITECTURES "ppc;i386")
	ENDIF(${CMAKE_BUILD_TYPE} MATCHES "Release")
ENDIF(APPLE)

FILE(GLOB RESOURCE_FILES RELATIVE ${CMAKE_SOURCE_DIR} data/[^.]*)
FOREACH(RESOURCE ${RESOURCE_FILES})
	IF(${RESOURCE} MATCHES "\\.html$")
		CONFIGURE_FILE(${RESOURCE} ${CMAKE_CURRENT_BINARY_DIR}/${RESOURCE})
	ELSE(${RESOURCE} MATCHES "\\.html$")
		CONFIGURE_FILE(${RESOURCE} ${CMAKE_CURRENT_BINARY_DIR}/${RESOURCE} COPYONLY)
	ENDIF(${RESOURCE} MATCHES "\\.html$")
ENDFOREACH(RESOURCE ${RESOURCE_FILES})

# Subdirectories
ADD_SUBDIRECTORY(keychain)
ADD_SUBDIRECTORY(src)

IF(USE_SPAWN)
	ADD_SUBDIRECTORY(protobuf)
	ADD_SUBDIRECTORY(messages)
	ADD_SUBDIRECTORY(spawn)
	SET_PROPERTY(TARGET ${BINARY_NAME} PROPERTY COMPILE_FLAGS "-DUSE_SPAWN")
	TARGET_LINK_LIBRARIES(${BINARY_NAME} spawn)
ENDIF(USE_SPAWN)

# Uninstall support
CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
  IMMEDIATE @ONLY)

ADD_CUSTOM_TARGET(uninstall
  "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")

IF(APPLE)
	ADD_CUSTOM_TARGET(bundle
		./mkbundle.sh
		DEPENDS ${BINARY_NAME}
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
ENDIF(APPLE)
